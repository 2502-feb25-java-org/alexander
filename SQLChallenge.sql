
-- Create three tables
create table Products (
	productID int identity(1,1) primary key,
	productName varchar(50) not null,
	productPrice money not null
);

create table Customers (
	customerID int identity(1,1) primary key,
	firstName varchar(20) not null,
	lastName varchar(30) not null,
	cardNumber varchar(16) -- can be null if it was a gift by the company for example
);

create table Orders (
	orderID int identity(1,1) primary key,
	productID int not null,
	customerID  int not null,

	constraint FK_ProductOrder foreign key (productID)
	references Products(productID),

	constraint FK_CustomerOrder foreign key (customerID)
	references Customers(customerID)
);

-- Add three products 
insert into Products (productName, productPrice) 
	values	('MacBook Pro', 1999.99),
			('iPad Mini', 499.99),
			('iPad Pro', 799.99);

-- Add three customers 
insert into Customers (firstName, lastName, cardNumber) 
	values ('Johny', 'Depp', '4024007117472703'),
			('Meryl', 'Streep', null),	-- Everything is free for Meryl Streep
			('Deepika', 'Padukone', '5038152338188208');

-- Add three orders purchased by three customers
insert into Orders (productID, customerID) 
	values (2, 1), -- Johny Depp purchased an iPad Mini
			(1, 3), -- Deepika Padukone purchased a Macbook Pro
			(3, 2); -- Meryl Streep purchased an iPad Pro

-- Add an iPhone for $200
insert into Products (productName, productPrice) 
	values	('iPhone', 200);

-- Add a customer Tina Smith
insert into Customers (firstName, lastName, cardNumber) 
	values ('Tina', 'Smith', null);

-- Tina Smith purchased an iPhone
insert into Orders (productID, customerID) 
	values (4, 4); -- Tina Smith purchased an iPhone

-- Report all orders by Tina Smith
select * from Orders where customerID = 4; -- see 

--Report all revenue generated by sales of iPhone 
200 * select Count(orderID) -- $200 times the number of times this was purchased
from Orders
where orderID = 4;

-- Increase price of an iPhone to $250
update Products
set productPrice = 250
where productID = 4;